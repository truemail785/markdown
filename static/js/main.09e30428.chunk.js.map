{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","input","textMin","textMax","contMin","contMax","textarea","textareaWidth","textareaHeight","content","contentwidth","contentHeight","handleChange","bind","handleTextareaLg","handleTextareaSm","handleContentLg","handleContentSm","event","this","setState","target","value","className","style","display","onClick","id","onChange","width","height","dangerouslySetInnerHTML","__html","marked","padding","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAiHeA,E,kDA5Gb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,MAAM,svCA8CNC,QAAS,OACTC,QAAS,SACTC,QAAS,OACTC,QAAS,UACTC,SAAU,UACVC,cAAe,OACfC,eAAe,OACfC,QAAS,UACTC,aAAa,OACbC,cAAe,WAGjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBACxB,EAAKG,gBAAkB,EAAKA,gBAAgBH,KAArB,gBACvB,EAAKI,gBAAkB,EAAKA,gBAAgBJ,KAArB,gBAjEP,E,yDAmELK,GACXC,KAAKC,SAAS,CAACnB,MAAOiB,EAAMG,OAAOC,U,yCAGnCH,KAAKC,SAAS,CAACX,QAAS,OAAOP,QAAS,UAAUC,QAAS,OAAOI,cAAe,OAAOC,eAAgB,W,yCAGxGW,KAAKC,SAAS,CAACX,QAAS,UAAUH,SAAU,UAAUC,cAAc,OAAOC,eAAgB,OAAON,QAAS,OAAOC,QAAS,c,wCAG3HgB,KAAKC,SAAS,CAACd,SAAU,OAAOI,aAAc,OAAOL,QAAS,OAAOD,QAAS,c,wCAG9Ee,KAAKC,SAAS,CAACd,SAAU,UAAUI,aAAc,OAAOC,cAAe,UAAUN,QAAS,UAAUD,QAAS,W,+BAG7G,OACE,yBAAKmB,UAAa,UAChB,yBAAKA,UAAa,YAAaC,MAAS,CAACC,QAASN,KAAKnB,MAAMM,WAC7D,yBAAKiB,UAAa,iBAChB,2BAAG,uBAAGA,UAAU,iBAAhB,WACA,4BAAQG,QAAWP,KAAKJ,iBAAkBS,MAAS,CAACC,QAASN,KAAKnB,MAAME,UAAU,uBAAGqB,UAAU,gCAC/F,4BAAQG,QAAWP,KAAKL,iBAAkBU,MAAS,CAACC,QAASN,KAAKnB,MAAMG,UAAU,uBAAGoB,UAAU,+BAEjG,8BAAUI,GAAI,SAAUL,MAASH,KAAKnB,MAAMC,MAAO2B,SAAYT,KAAKP,aAAcY,MAAS,CAACK,MAAMV,KAAKnB,MAAMO,cAAcuB,OAAQX,KAAKnB,MAAMQ,mBAI9I,yBAAKe,UAAa,aAAcC,MAAS,CAACC,QAASN,KAAKnB,MAAMS,QAAQoB,MAAOV,KAAKnB,MAAMU,aAAaoB,OAAQX,KAAKnB,MAAMW,gBACxH,yBAAKY,UAAa,iBAChB,2BAAG,uBAAGA,UAAU,iBAAhB,cACA,4BAAQG,QAAWP,KAAKF,gBAAiBO,MAAS,CAACC,QAASN,KAAKnB,MAAMI,UAAU,uBAAGmB,UAAU,gCAC9F,4BAAQG,QAAWP,KAAKH,gBAAiBQ,MAAS,CAACC,QAASN,KAAKnB,MAAMK,UAAU,uBAAGkB,UAAU,+BAEhG,yBAAKI,GAAI,UAAWI,wBAAyB,CAAEC,OAAQC,IAAOd,KAAKnB,MAAMC,QAASuB,MAAS,CAACU,QAAS,qB,GAtG3FC,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.09e30428.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport marked from \"marked\"\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      input: `\n# Welcome to my React Markdown Previewer!\n      \n## This is a sub-heading...\n### And here\\'s some other cool stuff:\n        \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n      \n\\`\\`\\`\n// this is multi-line code:\n      \nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == \\'\\`\\`\\`\\' && lastLine == \\'\\`\\`\\`\\') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n        \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n      \nThere\\'s also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n      \nAnd if you want to get really crazy, even tables:\n      \nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n      \n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n      \n      \n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let\\'s not forget embedded images:\n      \n![React Logo w/ Text](https://goo.gl/Umyytc)`,\n      textMin: \"none\",\n      textMax: \"itital\",\n      contMin: \"none\",\n      contMax: \"initial\",\n      textarea: \"initial\",\n      textareaWidth: \"60vw\",\n      textareaHeight:\"40vh\",\n      content: \"initial\",\n      contentwidth:\"80vw\",\n      contentHeight: \"initial\"\n    }\n    \n    this.handleChange = this.handleChange.bind(this)\n    this.handleTextareaLg = this.handleTextareaLg.bind(this)\n    this.handleTextareaSm = this.handleTextareaSm.bind(this)\n    this.handleContentLg = this.handleContentLg.bind(this)\n    this.handleContentSm = this.handleContentSm.bind(this)\n  }\n  handleChange(event){\n    this.setState({input: event.target.value})\n  }\n  handleTextareaLg(){\n    this.setState({content: \"none\",textMin: \"initial\",textMax: \"none\",textareaWidth: \"90vw\",textareaHeight: \"90vh\"})\n  }\n  handleTextareaSm(){\n    this.setState({content: \"initial\",textarea: \"initial\",textareaWidth:\"60vw\",textareaHeight: \"40vh\",textMin: \"none\",textMax: \"initial\"})\n  }\n  handleContentLg(){\n    this.setState({textarea: \"none\",contentwidth: \"90vw\",contMax: \"none\",contMin: \"initial\"})\n  }\n  handleContentSm(){\n    this.setState({textarea: \"initial\",contentwidth: \"80vw\",contentHeight: \"initial\",contMax: \"initial\",contMin: \"none\"})\n  }\n  render(){\n    return (\n      <div className = {\"appDiv\"}>\n        <div className = {\"editorDiv\"} style = {{display: this.state.textarea}}>\n        <nav className = {\"editortDivNav\"}>\n          <p><i className=\"fab fa-slack\"></i> Editor</p>\n          <button onClick = {this.handleTextareaSm} style = {{display: this.state.textMin}}><i className=\"fas fa-compress-arrows-alt\"></i></button>\n          <button onClick = {this.handleTextareaLg} style = {{display: this.state.textMax}}><i className=\"fas fa-expand-arrows-alt\"></i></button>\n        </nav>\n        <textarea id={\"editor\"} value = {this.state.input} onChange = {this.handleChange} style = {{width:this.state.textareaWidth,height: this.state.textareaHeight}}>\n        </textarea>\n        </div>\n        \n        <div className = {\"contentDiv\"} style = {{display: this.state.content,width: this.state.contentwidth,height: this.state.contentHeight}}>\n        <nav className = {\"contentDivNav\"}>\n          <p><i className=\"fab fa-slack\"></i> Previewer</p>\n          <button onClick = {this.handleContentSm} style = {{display: this.state.contMin}}><i className=\"fas fa-compress-arrows-alt\"></i></button>\n          <button onClick = {this.handleContentLg} style = {{display: this.state.contMax}}><i className=\"fas fa-expand-arrows-alt\"></i></button>\n        </nav>\n        <div id={\"preview\"} dangerouslySetInnerHTML={{ __html: marked(this.state.input)}} style = {{padding: \"20px 20px\"}}></div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}